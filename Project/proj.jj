/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. proj.jj */
/*@egen*/options{
    LOOKAHEAD = 1;
    DEBUG_PARSER = false;
                 
    ERROR_REPORTING = true;
}


PARSER_BEGIN(yal2jvm)

import java.io.*;
import java.util.*;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;

public class yal2jvm/*@bgen(jjtree)*/implements yal2jvmTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTyal2jvmState jjtree = new JJTyal2jvmState();

/*@egen*/

    public static final String ANSI_RESET = "\u001b[0m";
    public static final String ANSI_RED = "\u001b[31m";
    public static final String ANSI_GREEN = "\u001b[32m";
    public static final String ANSI_CYAN = "\u001b[36m";
    public static String fileName = "";
    public static String errorIn = "";

    public static void main(String args[]) throws ParseException {
        yal2jvm parser;

        if(args.length == 0){
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RESET + " Reading input ...");
            parser = new yal2jvm(System.in);
        }
        else if(args.length == 1){
            fileName = args[0];
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RESET + " Reading the file " + args[0] + " ..." + ANSI_RESET);
            try {
                parser = new yal2jvm(new java.io.FileInputStream(fileName));
            }
                catch(java.io.FileNotFoundException e) {
                System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RED + " The file " + args[0] + " was not found." + ANSI_RESET);
                return;
            }
        }
        else {
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RESET + " You must use one of the following:");
            System.out.println ("         java yal2jvm < file");
            System.out.println ("Or");
            System.out.println ("         java yal2jvm file");
            return ;
        }
        try {
            SimpleNode root = parser.Module();
            root.dump("");
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_GREEN + " The input was read sucessfully." + ANSI_RESET);
        }
        catch(ParseException e){
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RED + " There was an error during the parse." + ANSI_RESET);
            System.out.println (e.getMessage());
        }
        catch(TokenMgrError e){
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RED + " There was an error." + ANSI_RESET);
            System.out.println (e.getMessage());
        }
    }

}//Look aheads

PARSER_END(yal2jvm)

<DEFAULT> SKIP : {
    " "
    | "\t"
    | "\n"
    | "\r"
    | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
    }

/* reserved words */
<DEFAULT> TOKEN : {
    <RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
    | <ADDSUB_OP: "+" | "-">
    | <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
    | <BITWISE_OP: "&" | "|" | "^">
    | <NOT_OP: "!">
    | <WHILE: "while">
    | <IF: "if">
    | <ELSE: "else">
    | <ASSIGN: "=">
    | <ASPA: "\"">
    | <LPAR: "(">
    | <RPAR: ")">
    | <VIRG: ",">
    | <PVIRG: ";">
    | <LCHAVETA: "{">
    | <RCHAVETA: "}">
    | <FUNCTION: "function">
    | <MODULE: "module">
    | <SIZE: "size">
}

<DEFAULT> TOKEN : {
    <INTEGER: (<DIGIT>)+>
    | <ID: <LETTER> (<LETTER> | <DIGIT>)*>
    | <#LETTER: ["$","A"-"Z","_","a"-"z"]>
    | <#DIGIT: ["0"-"9"]>
    | <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

//Module ::= <MODULE> <ID> <LCHAVETA> ( Declaration )* ( Function )* <RCHAVETA>
SimpleNode Module() : {/*@bgen(jjtree) Module */
                       ASTModule jjtn000 = new ASTModule(JJTMODULE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token s; errorIn = "MODULE()";}
{/*@bgen(jjtree) Module */
    try {
/*@egen*/
    try {
        <MODULE>
         s=<ID> {jjtn000.name = s.image;}
         <LCHAVETA>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(LCHAVETA);
    }

    ( Declaration() )* ( Function() )*


    try {
         <RCHAVETA>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
    }/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Declaration ::= ( ArrayElement | ScalarElement ) ( <ASSIGN> ( ( "[" ArraySize "]" ) | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
void Declaration() : {/*@bgen(jjtree) Declaration */
                      ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token s1, s2; errorIn = "DECLARATION()";}
{/*@bgen(jjtree) Declaration */
    try {
/*@egen*/
    try {
        //<ID> ("[" "]")? ( <ASSIGN> ( ( "[" ArraySize() "]" ) | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
        Element() ( <ASSIGN> ( ( "[" ArraySize() "]" ) | ( s1=<ADDSUB_OP> {jjtn000.operator = s1.image;})? s2=<INTEGER> {jjtn000.integer = s2.image;}) )? <PVIRG>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Function ::= ( ( <FUNCTION> ( ArrayElement | ScalarElement ) <ASSIGN> <ID> <LPAR> ( Varlist )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist )? <RPAR> ) ) <LCHAVETA> Stmtlst <RCHAVETA>
void Function() : {/*@bgen(jjtree) Function */
                   ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token s1,s2; errorIn = "FUNCTION()";}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/

    try {
       <FUNCTION> s1=<ID> ( ( FunctionReturn(s1) <ASSIGN> s2=<ID> {jjtn000.name = s2.image;} <LPAR> (Varlist())? <RPAR> ) | (<LPAR> ( Varlist() )? <RPAR> {jjtn000.name = s1.image;}) )
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RPAR);
    }

    try {
        <LCHAVETA> Stmtlst() <RCHAVETA>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FunctionReturn(Token id)         : {/*@bgen(jjtree) Element */
  ASTElement jjtn000 = new ASTElement(JJTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Element */
    try {
/*@egen*/
    {jjtn000.name = id.image;}
    ("["/*@bgen(jjtree) ArrayElement */
         {
           ASTArrayElement jjtn001 = new ASTArrayElement(JJTARRAYELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ "]"/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/              |/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{})/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Varlist ::= ( ArrayElement | ScalarElement ) ( <VIRG> ( ArrayElement | ScalarElement ) )*
void Varlist() : {/*@bgen(jjtree) Varlist */
  ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Varlist */
   try {
/*@egen*/
   Element() ( <VIRG> Element() )*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

//ScalarElement ::= <ID>
void ScalarElement() : {/*@bgen(jjtree) ScalarElement */
                        ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/errorIn = "SCALARELEMENT()";}
{/*@bgen(jjtree) ScalarElement */
    try {
/*@egen*/
    try {
        <ID>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArrayElement() : {/*@bgen(jjtree) ArrayElement */
  ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayElement */
    try {
/*@egen*/
    "[" "]"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Element() : {/*@bgen(jjtree) Element */
                  ASTElement jjtn000 = new ASTElement(JJTELEMENT);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token s;}
{/*@bgen(jjtree) Element */
    try {
/*@egen*/
    s=<ID> {jjtn000.name = s.image;}
    (ArrayElement() |/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {})/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


//Stmtlst ::= ( Stmt )*
void Stmtlst()       : {}
{
    ( Stmt() )*
} 

//Stmt ::= While | If | Assign | Call <PVIRG>
void Stmt()       : {errorIn = "CALL()";}
{   
    While() | If()| LOOKAHEAD(3) Assign() |
    try {
         Call() <PVIRG>

    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
    }
     
}

//Assign ::= Lhs <ASSIGN> Rhs <PVIRG>
void Assign() : {/*@bgen(jjtree) Assign */
                 ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/errorIn = "ASSIGN()";}
{/*@bgen(jjtree) Assign */
    try {
/*@egen*/
    try {
        Lhs() <ASSIGN> 
    } catch (ParseException e) {
        System.out.print(e.toString());
        Token t;
       skip_to(ASSIGN);
    }

    try {
        Rhs() <PVIRG>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Lhs ::= ArrayAccess | ScalarAccess
void Lhs()       : {}
{
    Access()
}

//Rhs ::= ( Term ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term )? ) | "[" ArraySize "]" 
void Rhs() : {/*@bgen(jjtree) Rhs */
              ASTRhs jjtn000 = new ASTRhs(JJTRHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token s;}
{/*@bgen(jjtree) Rhs */
    try {
/*@egen*/
    ( Term() ( ( 
        s=<ARITH_OP> {jjtn000.operator = s.image;}  | 
        s= <BITWISE_OP> {jjtn000.operator = s.image;} | 
        s=<ADDSUB_OP> {jjtn000.operator = s.image;} ) 
        Term() )? ) | "[" ArraySize() "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
} 

//ArraySize ::= ScalarAccess | <INTEGER>
void ArraySize() : {/*@bgen(jjtree) ArraySize */
                    ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token s1,s2;} 
{/*@bgen(jjtree) ArraySize */
    try {
/*@egen*/
    (s1=<ID> {jjtn000.name = s1.image;}ScalarAccess()) | s2=<INTEGER>/*@bgen(jjtree)*/
                                                                      {
                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                        jjtc000 = false;
                                                                      }
/*@egen*/ {jjtn000.value = s2.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Term ::= ( <ADDSUB_OP> )? ( <INTEGER> | Call | ArrayAccess | ScalarAccess )
void Term() : {/*@bgen(jjtree) Term */
               ASTTerm jjtn000 = new ASTTerm(JJTTERM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token s1, s2;} 
{/*@bgen(jjtree) Term */
    try {
/*@egen*/
    ( s1=<ADDSUB_OP> {jjtn000.operator = s1.image;}  )? 
    ( s2=<INTEGER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.operator = s2.image;}  | 
    LOOKAHEAD(3) Call() | Access() )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Exprtest ::= <LPAR> Lhs <RELA_OP> Rhs <RPAR>
void Exprtest() : {/*@bgen(jjtree) Exprtest */
                   ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token s;} 
{/*@bgen(jjtree) Exprtest */
        try {
/*@egen*/
        <LPAR> Lhs()
        s=<RELA_OP> {jjtn000.operator = s.image;}
        Rhs() <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/   
}

//While ::= <WHILE> Exprtest <LCHAVETA> Stmtlst <RCHAVETA>
void While() : {/*@bgen(jjtree) While */
                ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/errorIn = "WHILE()";} 
{/*@bgen(jjtree) While */
    try {
/*@egen*/
    try {
        <WHILE> Exprtest() <LCHAVETA> 
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(LCHAVETA);
    }

    try {
       Stmtlst() <RCHAVETA>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//If ::= <IF> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst <RCHAVETA> )?
void If() : {/*@bgen(jjtree) If */
             ASTIf jjtn000 = new ASTIf(JJTIF);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/errorIn = "IF()";} 
{/*@bgen(jjtree) If */
    try {
/*@egen*/
    try {
        <IF> Exprtest() <LCHAVETA>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(LCHAVETA);
    }

    try {
        Stmtlst() <RCHAVETA> 
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
    }

    

    try {
        ( <ELSE>  <LCHAVETA>/*@bgen(jjtree) Else */
                              {
                                ASTElse jjtn001 = new ASTElse(JJTELSE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/  Stmtlst()/*@bgen(jjtree)*/
                              } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte001;
                                }
                                if (jjte001 instanceof ParseException) {
                                  throw (ParseException)jjte001;
                                }
                                throw (Error)jjte001;
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
                              }
/*@egen*/       <RCHAVETA> )? 
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Call ::= <ID> ( "." <ID> )? <LPAR> ( ArgumentList )? <RPAR>
void Call() : {/*@bgen(jjtree) Call */
               ASTCall jjtn000 = new ASTCall(JJTCALL);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token s1,s2;} 
{/*@bgen(jjtree) Call */
        try {
/*@egen*/
        s1=<ID> {jjtn000.object = s1.image;}
        ( "." 
        s2=<ID> {jjtn000.variable = s2.image;}
        )? <LPAR> ( ArgumentList() )? <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//ArgumentList ::= Argument ( <VIRG> Argument )*
void ArgumentList() : {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ArgumentList */
    try {
/*@egen*/
    Argument() ( <VIRG> Argument() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Argument ::= ( <ID> | <STRING> | <INTEGER> )
void Argument() : {/*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token s;} 
{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    (s=<ID>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.name = s.image;} |
    s=<STRING>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.name = s.image;} | 
    s=<INTEGER>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.name = s.image;})/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//ArrayAccess ::= <ID> "[" Index "]"
void ArrayAccess() : {/*@bgen(jjtree) ArrayAccess */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ArrayAccess */
    try {
/*@egen*/
    "[" Index() "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//ScalarAccess ::= <ID> ( "." <SIZE> )?
void ScalarAccess()       : {} 
{
    ( "." <SIZE> )?
}

void Access() : {/*@bgen(jjtree) Access */
                 ASTAccess jjtn000 = new ASTAccess(JJTACCESS);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token s;}
{/*@bgen(jjtree) Access */
    try {
/*@egen*/
    s=<ID> {jjtn000.name = s.image;}
    (ArrayAccess() | ScalarAccess())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


//Index ::= <ID> | <INTEGER>
void Index() : {/*@bgen(jjtree) Index */
                ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token s;} 
{/*@bgen(jjtree) Index */
    try {
/*@egen*/
    s=<ID>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.name = s.image;}|
    s=<INTEGER>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.value = s.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// skip_to(int t) - This function consumes until it finds the token given as an argument.
JAVACODE
void skip_to(int t)       
{
    Token nextToken;
    do {
        nextToken = getNextToken();
    } while (nextToken.kind != t);
}