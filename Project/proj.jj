options{
    LOOKAHEAD = 1;
    DEBUG_PARSER =false;
}


PARSER_BEGIN(Scanner)

import java.io.*;
import java.util.*;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;

public class Scanner {

    public static void main(String args[]) throws ParseException {
         Scanner parser;

        if(args.length == 0){
            System.out.println ("Scanner: Reading input ...");
            parser = new Scanner(System.in);
        }
        else if(args.length == 1){
            System.out.println ("Scanner: Reading the file " + args[0] + " ..." );
            try {
                parser = new Scanner(new java.io.FileInputStream(args[0]));
            }
                catch(java.io.FileNotFoundException e) {
                System.out.println ("Scanner: The file " + args[0] + " was not found.");
                return;
            }
        }
        else {
            System.out.println ("Scanner:  You must use one of the following:");
            System.out.println ("         java Scanner < file");
            System.out.println ("Or");
            System.out.println ("         java Scanner file");
            return ;
        }
        try {
            parser.Module();
            System.out.println ("Scanner: The input was read sucessfully.");
        }
        catch(ParseException e){
            System.out.println ("Scanner: There was an error during the parse.");
            System.out.println (e.getMessage());
        }
        catch(TokenMgrError e){
            System.out.println ("Scanner: There was an error.");
            System.out.println (e.getMessage());
        }
    }

}//Look aheads

PARSER_END(Scanner)

<DEFAULT> SKIP : {
    " "
    | "\t"
    | "\n"
    | "\r"
    | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
    }

/* reserved words */
<DEFAULT> TOKEN : {
    <RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
    | <ADDSUB_OP: "+" | "-">
    | <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
    | <BITWISE_OP: "&" | "|" | "^">
    | <NOT_OP: "!">
    | <WHILE: "while">
    | <IF: "if">
    | <ELSE: "else">
    | <ASSIGN: "=">
    | <ASPA: "\"">
    | <LPAR: "(">
    | <RPAR: ")">
    | <VIRG: ",">
    | <PVIRG: ";">
    | <LCHAVETA: "{">
    | <RCHAVETA: "}">
    | <FUNCTION: "function">
    | <MODULE: "module">
    | <SIZE: "size">
}

<DEFAULT> TOKEN : {
    <INTEGER: (<DIGIT>)+>
    | <ID: <LETTER> (<LETTER> | <DIGIT>)*>
    | <#LETTER: ["$","A"-"Z","_","a"-"z"]>
    | <#DIGIT: ["0"-"9"]>
    | <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

//Module ::= <MODULE> <ID> <LCHAVETA> ( Declaration )* ( Function )* <RCHAVETA>
void Module() : {}
{
    try {
        <MODULE> <ID> <LCHAVETA>
    } catch (ParseException e) {
        System.out.println(" > MODULE(): "+ e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != LCHAVETA);
    }

    ( Declaration() )* ( Function() )*


    try {
         <RCHAVETA>
    } catch (ParseException e) {
        System.out.println(" > MODULE(): "+ e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != RCHAVETA);
    }
}

//Declaration ::= ( ArrayElement | ScalarElement ) ( <ASSIGN> ( ( "[" ArraySize "]" ) | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
void Declaration() : {}
{
    try {
        //<ID> ("[" "]")? ( <ASSIGN> ( ( "[" ArraySize() "]" ) | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
        Element() ( <ASSIGN> ( ( "[" ArraySize() "]" ) | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
    } catch (ParseException e) {
        System.out.println(" > DECLARATION(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != PVIRG);
    }
}

//Function ::= ( ( <FUNCTION> ( ArrayElement | ScalarElement ) <ASSIGN> <ID> <LPAR> ( Varlist )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist )? <RPAR> ) ) <LCHAVETA> Stmtlst <RCHAVETA>
void Function() : {}
{
    //TODO: Meter Element()
    try {
        <FUNCTION> <ID>
    } catch (ParseException e) {
        System.out.println(" > FUNCTION(): " + e.toString());
        Token t;
        int index = 1;
         do {
            t = getToken(index);
            if (t.kind == LPAR)
                break;
            getNextToken();
        } while (true);
    }

    try {
        ( ( ("[" "]")? <ASSIGN> <ID> <LPAR> (Varlist())? <RPAR> ) | (<LPAR> ( Varlist() )? <RPAR> ) )
    } catch (ParseException e) {
        System.out.println(" > FUNCTION(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != RPAR);
    }

    try {
        <LCHAVETA> Stmtlst() <RCHAVETA>
    } catch (ParseException e) {
        System.out.println(" > FUNCTION(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != RCHAVETA);
    }
}

//Varlist ::= ( ArrayElement | ScalarElement ) ( <VIRG> ( ArrayElement | ScalarElement ) )*
void Varlist() : {}
{
   Element() ( <VIRG> Element() )*
}

//ScalarElement ::= <ID>
void ScalarElement() : {}
{
    try {
        <ID>
    } catch (ParseException e) {
        System.out.println(" > SCALARELEMENT(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != PVIRG);
    }
}

void ArrayElement() : {}
{
    "[" "]"
}

void Element() : {}
{
    <ID> (ArrayElement() | {})
}


//Stmtlst ::= ( Stmt )*
void Stmtlst() : {}
{
    ( Stmt() )*
} 

//Stmt ::= While | If | Assign | Call <PVIRG>
void Stmt() : {}
{   
    While() | If()| LOOKAHEAD(3) Assign() |
    try {
         Call() <PVIRG>

    } catch (ParseException e) {
        System.out.println(" > CALL(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != PVIRG);
    }
     
}

//Assign ::= Lhs <ASSIGN> Rhs <PVIRG>
void Assign() : {}
{
    try {
        Lhs() <ASSIGN> 
    } catch (ParseException e) {
        System.out.println(" > ASSIGN(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != ASSIGN);
    }

    try {
        Rhs() <PVIRG>
    } catch (ParseException e) {
        System.out.println(" > ASSIGN(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != PVIRG);
    }
}

//Lhs ::= ArrayAccess | ScalarAccess
void Lhs() : {}
{
    Access()
}

//Rhs ::= ( Term ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term )? ) | "[" ArraySize "]" 
void Rhs() : {}
{
    ( Term() ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term() )? ) | "[" ArraySize() "]" 
} 

//ArraySize ::= ScalarAccess | <INTEGER>
void ArraySize() : {} 
{
    (<ID> ScalarAccess()) | <INTEGER>
}

//Term ::= ( <ADDSUB_OP> )? ( <INTEGER> | Call | ArrayAccess | ScalarAccess )
void Term() : {} 
{
    ( <ADDSUB_OP> )? ( <INTEGER> | LOOKAHEAD(3) Call() | Access() )
}

//Exprtest ::= <LPAR> Lhs <RELA_OP> Rhs <RPAR>
void Exprtest() : {} 
{
        <LPAR> Lhs() <RELA_OP> Rhs() <RPAR>   
}

//While ::= <WHILE> Exprtest <LCHAVETA> Stmtlst <RCHAVETA>
void While() : {} 
{
    try {
        <WHILE> Exprtest() <LCHAVETA> 
    } catch (ParseException e) {
        System.out.println(" > WHILE(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != LCHAVETA);
    }

    try {
       Stmtlst() <RCHAVETA>
    } catch (ParseException e) {
        System.out.println(" > WHILE(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != RCHAVETA);
    }
}

//If ::= <IF> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst <RCHAVETA> )?
void If() : {} 
{
    try {
        <IF> Exprtest() <LCHAVETA>
    } catch (ParseException e) {
        System.out.println(" > IF(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != LCHAVETA);
    }

    try {
        Stmtlst() <RCHAVETA> 
    } catch (ParseException e) {
        System.out.println(" > IF(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != RCHAVETA);
    }

    try {
        ( <ELSE> <LCHAVETA> Stmtlst() <RCHAVETA> )?
    } catch (ParseException e) {
        System.out.println(" > IF(): " + e.toString());
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != PVIRG);
    }
}

//Call ::= <ID> ( "." <ID> )? <LPAR> ( ArgumentList )? <RPAR>
void Call() : {} 
{
        <ID> ( "." <ID> )? <LPAR> ( ArgumentList() )? <RPAR>
}

//ArgumentList ::= Argument ( <VIRG> Argument )*
void ArgumentList() : {} 
{
    Argument() ( <VIRG> Argument() )*
}

//Argument ::= ( <ID> | <STRING> | <INTEGER> )
void Argument() : {} 
{
    ( <ID> | <STRING> | <INTEGER> )
}

//ArrayAccess ::= <ID> "[" Index "]"
/*void ArrayAccess() : {} 
{
    <ID> "[" Index() "]"
}*/

//ScalarAccess ::= <ID> ( "." <SIZE> )?
void ScalarAccess() : {} 
{
    ( "." <SIZE> )?
}

void Access() : {}
{
    <ID> ("[" Index() "]" | ScalarAccess())
}


//Index ::= <ID> | <INTEGER>
void Index() : {} 
{
    <ID> | <INTEGER>
}