options{
    LOOKAHEAD = 1;
    DEBUG_PARSER = false;
    MULTI = true;
    ERROR_REPORTING = true;
}


PARSER_BEGIN(yal2jvm)

public class yal2jvm {
    public static String errorIn = "";
    
    public yal2jvm(){
    }
}

PARSER_END(yal2jvm)

<DEFAULT> SKIP : {
    " "
    | "\t"
    | "\n"
    | "\r"
    | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
    }

/* reserved words */
<DEFAULT> TOKEN : {
    <RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
    | <ADDSUB_OP: "+" | "-">
    | <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
    | <BITWISE_OP: "&" | "|" | "^">
    | <NOT_OP: "!">
    | <WHILE: "while">
    | <IF: "if">
    | <ELSE: "else">
    | <ASSIGN: "=">
    | <ASPA: "\"">
    | <LPAR: "(">
    | <RPAR: ")">
    | <VIRG: ",">
    | <PVIRG: ";">
    | <LCHAVETA: "{">
    | <RCHAVETA: "}">
    | <FUNCTION: "function">
    | <MODULE: "module">
    | <SIZE: "size">
}

<DEFAULT> TOKEN : {
    <INTEGER: (<DIGIT>)+>
    | <ID: <LETTER> (<LETTER> | <DIGIT>)*>
    | <#LETTER: ["$","A"-"Z","_","a"-"z"]>
    | <#DIGIT: ["0"-"9"]>
    | <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

//Module ::= <MODULE> <ID> <LCHAVETA> ( Declaration )* ( Function )* <RCHAVETA>
SimpleNode Module() : {Token s; errorIn = "MODULE()";}
{
    try {
        <MODULE>
         s=<ID> {jjtThis.name = s.image;}
         <LCHAVETA>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(LCHAVETA);
    }

    ( Declaration() )* ( Function() )*


    try {
         <RCHAVETA>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
    } {return jjtThis;}
}

//Declaration ::= ( ArrayElement | ScalarElement ) ( <ASSIGN> ( ( "[" ArraySize "]" ) | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
void Declaration() : {Token s1, s2; errorIn = "DECLARATION()";}
{
    try {
        //<ID> ("[" "]")? ( <ASSIGN> ( ( "[" ArraySize() "]" ) | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
        Element() ( <ASSIGN> ( ( "[" ArraySize() "]" ) | ( s1=<ADDSUB_OP> {jjtThis.operator = s1.image;})? s2=<INTEGER> {jjtThis.integer = s2.image;}) )? <PVIRG>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
    }
}

//Function ::= ( ( <FUNCTION> ( ArrayElement | ScalarElement ) <ASSIGN> <ID> <LPAR> ( Varlist )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist )? <RPAR> ) ) <LCHAVETA> Stmtlst <RCHAVETA>
void Function() : {Token s1,s2; errorIn = "FUNCTION()";}
{

    try {
       <FUNCTION> s1=<ID> ( ( FunctionReturn(s1) <ASSIGN> s2=<ID> {jjtThis.name = s2.image; jjtThis.line = s2.beginLine;} <LPAR> (Varlist())? <RPAR> ) | (<LPAR> ( Varlist() )? <RPAR> {jjtThis.name = s1.image; jjtThis.line = s1.beginLine;}) )
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RPAR);
    }

    try {
        <LCHAVETA> Stmtlst() <RCHAVETA>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
    }
}

void FunctionReturn(Token id) #Element: {}
{
    {jjtThis.name = id.image;}
    ("[" "]" #ArrayElement)?
}

//Varlist ::= ( ArrayElement | ScalarElement ) ( <VIRG> ( ArrayElement | ScalarElement ) )*
void Varlist() : {}
{
   Element() ( <VIRG> Element() )*
}

//ScalarElement ::= <ID>
void ScalarElement() : {errorIn = "SCALARELEMENT()";}
{
    try {
        <ID>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
    }
}

void ArrayElement() : {}
{
    "[" "]"
}

void Element() : {Token s;}
{
    s=<ID> {jjtThis.name = s.image; jjtThis.line = s.beginLine;}
    (ArrayElement())?
}


//Stmtlst ::= ( Stmt )*
void Stmtlst() #void : {}
{
    ( Stmt() )*
} 

//Stmt ::= While | If | Assign | Call <PVIRG>
void Stmt() #void : {errorIn = "CALL()";}
{   
    While() | If()| LOOKAHEAD(3) Assign() |
    try {
         Call() <PVIRG>

    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
    }
     
}

//Assign ::= Lhs <ASSIGN> Rhs <PVIRG>
void Assign() : {Token s; errorIn = "ASSIGN()";}
{
    try {
        Lhs() s=<ASSIGN> {jjtThis.line = s.beginLine;} 
    } catch (ParseException e) {
        System.out.print(e.toString());
        Token t;
       skip_to(ASSIGN);
    }

    try {
        Rhs() <PVIRG>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
    }
}

//Lhs ::= ArrayAccess | ScalarAccess
void Lhs() #void : {}
{
    Access()
}

//Rhs ::= ( Term ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term )? ) | "[" ArraySize "]" 
void Rhs() : {Token s;}
{
    ( Term() ( ( 
        s=<ARITH_OP> {jjtThis.operator = s.image;}  | 
        s=<BITWISE_OP> {jjtThis.operator = s.image;} | 
        s=<ADDSUB_OP> {jjtThis.operator = s.image;} ) 
        Term() )? ) | "[" ArraySize() "]" 
} 

//ArraySize ::= ScalarAccess | <INTEGER>
void ArraySize() : {Token s1,s2;} 
{
    (s1=<ID> {jjtThis.name = s1.image; jjtThis.line = s1.beginLine;} ScalarAccess()) | s2=<INTEGER> {jjtThis.value = s2.image; jjtThis.line = s2.beginLine;}
}

//Term ::= ( <ADDSUB_OP> )? ( <INTEGER> | Call | ArrayAccess | ScalarAccess )
void Term() : {Token s1, s2;} 
{
    ( s1=<ADDSUB_OP> {jjtThis.operator = s1.image;}  )? 
    ( s2=<INTEGER> {jjtThis.integer = s2.image;}  | 
    LOOKAHEAD(3) Call() | Access() )
}

//Exprtest ::= <LPAR> Lhs <RELA_OP> Rhs <RPAR>
void Exprtest() : {Token s;} 
{
        <LPAR> Lhs()
        s=<RELA_OP> {jjtThis.operator = s.image;}
        Rhs() <RPAR>   
}

//While ::= <WHILE> Exprtest <LCHAVETA> Stmtlst <RCHAVETA>
void While() : {Token s1; errorIn = "WHILE()";} 
{
    try {
        s1=<WHILE>{jjtThis.line = s1.beginLine;} Exprtest() <LCHAVETA> 
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(LCHAVETA);
    }

    try {
       Stmtlst() <RCHAVETA>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
    }
}

//If ::= <IF> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst <RCHAVETA> )?
void If() : {Token s1; errorIn = "IF()";} 
{
    try {
        s1=<IF>{jjtThis.line = s1.beginLine;} Exprtest() <LCHAVETA>
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(LCHAVETA);
    }

    try {
        Stmtlst() <RCHAVETA> 
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
    }

    

    try {
        ( <ELSE>  <LCHAVETA>  Stmtlst() #Else <RCHAVETA> )? 
    } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
    }
}

//Call ::= <ID> ( "." <ID> )? <LPAR> ( ArgumentList )? <RPAR>
void Call() : {Token s1,s2;} 
{
        s1=<ID> {jjtThis.function = s1.image; jjtThis.line = s1.beginLine;}
        ( "." 
        s2=<ID> {jjtThis.module = jjtThis.function; jjtThis.function = s2.image;}
        )? <LPAR> ( ArgumentList() )? <RPAR>
}

//ArgumentList ::= Argument ( <VIRG> Argument )*
void ArgumentList() : {} 
{
    Argument() ( <VIRG> Argument() )*
}

//Argument ::= ( <ID> | <STRING> | <INTEGER> )
void Argument() : {Token s;} 
{
    (s=<ID> {jjtThis.name = s.image; jjtThis.type = "ID"; jjtThis.line = s.beginLine;} |
    s=<STRING> {jjtThis.name = s.image; jjtThis.type = "String"; jjtThis.line = s.beginLine;} | 
    s=<INTEGER> {jjtThis.name = s.image; jjtThis.type = "Integer"; jjtThis.line = s.beginLine;})
}

//ArrayAccess ::= <ID> "[" Index "]"
void ArrayAccess() : {} 
{
    "[" Index() "]"
}

//ScalarAccess ::= <ID> ( "." <SIZE> )?
void ScalarAccess() #void : {} 
{
    ( "." <SIZE>  #SizeAccess)?
}

void Access() : {Token s;}
{
    s=<ID> {jjtThis.name = s.image; jjtThis.line = s.beginLine;}
    (ArrayAccess() | ScalarAccess())
}


//Index ::= <ID> | <INTEGER>
void Index() : {Token s;} 
{
    s=<ID> {jjtThis.name = s.image; jjtThis.line = s.beginLine;}|
    s=<INTEGER> {jjtThis.value = s.image; jjtThis.line = s.beginLine;}
}

// skip_to(int t) - This function consumes until it finds the token given as an argument.
JAVACODE
void skip_to(int t) #void 
{
    Token nextToken;
    do {
        nextToken = getNextToken();
    } while (nextToken.kind != t);
}