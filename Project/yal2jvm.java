/* Generated By:JJTree&JavaCC: Do not edit this line. yal2jvm.java */
import java.io.*;
import java.util.*;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;

public class yal2jvm/*@bgen(jjtree)*/implements yal2jvmTreeConstants, yal2jvmConstants {/*@bgen(jjtree)*/
  protected static JJTyal2jvmState jjtree = new JJTyal2jvmState();
    public static final String ANSI_RESET = "\u001b[0m";
    public static final String ANSI_RED = "\u001b[31m";
    public static final String ANSI_GREEN = "\u001b[32m";
    public static final String ANSI_CYAN = "\u001b[36m";
    public static String fileName = "";
    public static String errorIn = "";

    public static void main(String args[]) throws ParseException {
        yal2jvm parser;

        if(args.length == 0){
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RESET + " Reading input ...");
            parser = new yal2jvm(System.in);
        }
        else if(args.length == 1){
            fileName = args[0];
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RESET + " Reading the file " + args[0] + " ..." + ANSI_RESET);
            try {
                parser = new yal2jvm(new java.io.FileInputStream(fileName));
            }
                catch(java.io.FileNotFoundException e) {
                System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RED + " The file " + args[0] + " was not found." + ANSI_RESET);
                return;
            }
        }
        else {
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RESET + " You must use one of the following:");
            System.out.println ("         java yal2jvm < file");
            System.out.println ("Or");
            System.out.println ("         java yal2jvm file");
            return ;
        }
        try {
            SimpleNode root = parser.Module();
            root.dump("");
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_GREEN + " The input was read sucessfully." + ANSI_RESET);
        }
        catch(ParseException e){
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RED + " There was an error during the parse." + ANSI_RESET);
            System.out.println (e.getMessage());
        }
        catch(TokenMgrError e){
            System.out.println (ANSI_CYAN + "yal2jvm:" + ANSI_RED + " There was an error." + ANSI_RESET);
            System.out.println (e.getMessage());
        }
    }

//Module ::= <MODULE> <ID> <LCHAVETA> ( Declaration )* ( Function )* <RCHAVETA>
  static final public SimpleNode Module() throws ParseException {
                       /*@bgen(jjtree) Module */
                       ASTModule jjtn000 = new ASTModule(JJTMODULE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token s; errorIn = "MODULE()";
    try {
      try {
        jj_consume_token(MODULE);
        s = jj_consume_token(ID);
                 jjtn000.name = s.image;
        jj_consume_token(LCHAVETA);
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(LCHAVETA);
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Declaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Function();
      }
      try {
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
       {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

//Declaration ::= ( ArrayElement | ScalarElement ) ( <ASSIGN> ( ( "[" ArraySize "]" ) | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
  static final public void Declaration() throws ParseException {
                      /*@bgen(jjtree) Declaration */
                      ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token s1, s2; errorIn = "DECLARATION()";
    try {
      try {
        Element();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 31:
            jj_consume_token(31);
            ArraySize();
            jj_consume_token(32);
            break;
          case ADDSUB_OP:
          case INTEGER:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ADDSUB_OP:
              s1 = jj_consume_token(ADDSUB_OP);
                                                                           jjtn000.operator = s1.image;
              break;
            default:
              jj_la1[2] = jj_gen;
              ;
            }
            s2 = jj_consume_token(INTEGER);
                                                                                                                         jjtn000.integer = s2.image;
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Function ::= ( ( <FUNCTION> ( ArrayElement | ScalarElement ) <ASSIGN> <ID> <LPAR> ( Varlist )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist )? <RPAR> ) ) <LCHAVETA> Stmtlst <RCHAVETA>
  static final public void Function() throws ParseException {
                   /*@bgen(jjtree) Function */
                   ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token s1,s2; errorIn = "FUNCTION()";
    try {
      try {
        jj_consume_token(FUNCTION);
        s1 = jj_consume_token(ID);
                 jjtn000.firstName = s1.image;
      } catch (ParseException e) {
        System.out.print(e.toString());
        Token t;
        int index = 1;
         do {
            t = getToken(index);
            if (t.kind == LPAR)
                break;
            getNextToken();
        } while (true);
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
        case 31:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 31:
            jj_consume_token(31);
            jj_consume_token(32);
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          jj_consume_token(ASSIGN);
          s2 = jj_consume_token(ID);
                                         jjtn000.secondName = s2.image;
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            Varlist();
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
          break;
        case LPAR:
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            Varlist();
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RPAR);
      }
      try {
        jj_consume_token(LCHAVETA);
        Stmtlst();
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Varlist ::= ( ArrayElement | ScalarElement ) ( <VIRG> ( ArrayElement | ScalarElement ) )*
  static final public void Varlist() throws ParseException {
                  /*@bgen(jjtree) Varlist */
  ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Element();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(VIRG);
        Element();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

//ScalarElement ::= <ID>
  static final public void ScalarElement() throws ParseException {
                        /*@bgen(jjtree) ScalarElement */
                        ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);errorIn = "SCALARELEMENT()";
    try {
      try {
        jj_consume_token(ID);
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ArrayElement() throws ParseException {
                       /*@bgen(jjtree) ArrayElement */
  ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(31);
      jj_consume_token(32);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Element() throws ParseException {
                  /*@bgen(jjtree) Element */
                  ASTElement jjtn000 = new ASTElement(JJTELEMENT);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token s;
    try {
      s = jj_consume_token(ID);
            jjtn000.name = s.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        ArrayElement();
        break;
      default:
        jj_la1[10] = jj_gen;
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;

      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Stmtlst ::= ( Stmt )*
  static final public void Stmtlst() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case IF:
      case ID:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      Stmt();
    }
  }

//Stmt ::= While | If | Assign | Call <PVIRG>
  static final public void Stmt() throws ParseException {
                     errorIn = "CALL()";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      While();
      break;
    case IF:
      If();
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_1(3)) {
        Assign();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          try {
            Call();
            jj_consume_token(PVIRG);
          } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
          }
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

//Assign ::= Lhs <ASSIGN> Rhs <PVIRG>
  static final public void Assign() throws ParseException {
                 /*@bgen(jjtree) Assign */
                 ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);errorIn = "ASSIGN()";
    try {
      try {
        Lhs();
        jj_consume_token(ASSIGN);
      } catch (ParseException e) {
        System.out.print(e.toString());
        Token t;
       skip_to(ASSIGN);
      }
      try {
        Rhs();
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Lhs ::= ArrayAccess | ScalarAccess
  static final public void Lhs() throws ParseException {
    Access();
  }

//Rhs ::= ( Term ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term )? ) | "[" ArraySize "]" 
  static final public void Rhs() throws ParseException {
              /*@bgen(jjtree) Rhs */
              ASTRhs jjtn000 = new ASTRhs(JJTRHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
      case INTEGER:
      case ID:
        Term();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDSUB_OP:
        case ARITH_OP:
        case BITWISE_OP:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARITH_OP:
            s = jj_consume_token(ARITH_OP);
                      jjtn000.operator = s.image;
            break;
          case BITWISE_OP:
            s = jj_consume_token(BITWISE_OP);
                         jjtn000.operator = s.image;
            break;
          case ADDSUB_OP:
            s = jj_consume_token(ADDSUB_OP);
                       jjtn000.operator = s.image;
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Term();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      case 31:
        jj_consume_token(31);
        ArraySize();
        jj_consume_token(32);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//ArraySize ::= ScalarAccess | <INTEGER>
  static final public void ArraySize() throws ParseException {
                    /*@bgen(jjtree) ArraySize */
                    ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token s1,s2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        s1 = jj_consume_token(ID);
              jjtn000.name = s1.image;
        ScalarAccess();
        break;
      case INTEGER:
        s2 = jj_consume_token(INTEGER);
                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                        jjtc000 = false;
                                                                       jjtn000.value = s2.image;
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Term ::= ( <ADDSUB_OP> )? ( <INTEGER> | Call | ArrayAccess | ScalarAccess )
  static final public void Term() throws ParseException {
               /*@bgen(jjtree) Term */
               ASTTerm jjtn000 = new ASTTerm(JJTTERM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token s1, s2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
        s1 = jj_consume_token(ADDSUB_OP);
                      jjtn000.operator = s1.image;
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        s2 = jj_consume_token(INTEGER);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.operator = s2.image;
        break;
      default:
        jj_la1[19] = jj_gen;
        if (jj_2_2(3)) {
          Call();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            Access();
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Exprtest ::= <LPAR> Lhs <RELA_OP> Rhs <RPAR>
  static final public void Exprtest() throws ParseException {
                   /*@bgen(jjtree) Exprtest */
                   ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token s;
    try {
      jj_consume_token(LPAR);
      Lhs();
      s = jj_consume_token(RELA_OP);
                     jjtn000.operator = s.image;
      Rhs();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//While ::= <WHILE> Exprtest <LCHAVETA> Stmtlst <RCHAVETA>
  static final public void While() throws ParseException {
                /*@bgen(jjtree) While */
                ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);errorIn = "WHILE()";
    try {
      try {
        jj_consume_token(WHILE);
        Exprtest();
        jj_consume_token(LCHAVETA);
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(LCHAVETA);
      }
      try {
        Stmtlst();
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//If ::= <IF> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst <RCHAVETA> )?
  static final public void If() throws ParseException {
             /*@bgen(jjtree) If */
             ASTIf jjtn000 = new ASTIf(JJTIF);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);errorIn = "IF()";
    try {
      try {
        jj_consume_token(IF);
        Exprtest();
        jj_consume_token(LCHAVETA);
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(LCHAVETA);
      }
      try {
        Stmtlst();
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(RCHAVETA);
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          jj_consume_token(LCHAVETA);
                                ASTElse jjtn001 = new ASTElse(JJTELSE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
          try {
            Stmtlst();
          } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte001;}
                                }
                                if (jjte001 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte001;}
                                }
                                {if (true) throw (Error)jjte001;}
          } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
          }
          jj_consume_token(RCHAVETA);
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        System.out.print(e.toString());
        skip_to(PVIRG);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Call ::= <ID> ( "." <ID> )? <LPAR> ( ArgumentList )? <RPAR>
  static final public void Call() throws ParseException {
               /*@bgen(jjtree) Call */
               ASTCall jjtn000 = new ASTCall(JJTCALL);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token s1,s2;
    try {
      s1 = jj_consume_token(ID);
                 jjtn000.object = s1.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        s2 = jj_consume_token(ID);
                 jjtn000.variable = s2.image;
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case ID:
      case STRING:
        ArgumentList();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//ArgumentList ::= Argument ( <VIRG> Argument )*
  static final public void ArgumentList() throws ParseException {
                       /*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Argument();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_5;
        }
        jj_consume_token(VIRG);
        Argument();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Argument ::= ( <ID> | <STRING> | <INTEGER> )
  static final public void Argument() throws ParseException {
                   /*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        s = jj_consume_token(ID);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.name = s.image;
        break;
      case STRING:
        s = jj_consume_token(STRING);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.name = s.image;
        break;
      case INTEGER:
        s = jj_consume_token(INTEGER);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.name = s.image;
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//ArrayAccess ::= <ID> "[" Index "]"
  static final public void ArrayAccess() throws ParseException {
                      /*@bgen(jjtree) ArrayAccess */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(31);
      Index();
      jj_consume_token(32);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//ScalarAccess ::= <ID> ( "." <SIZE> )?
  static final public void ScalarAccess() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      jj_consume_token(SIZE);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  static final public void Access() throws ParseException {
                 /*@bgen(jjtree) Access */
                 ASTAccess jjtn000 = new ASTAccess(JJTACCESS);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token s;
    try {
      s = jj_consume_token(ID);
            jjtn000.name = s.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        ArrayAccess();
        break;
      default:
        jj_la1[27] = jj_gen;
        ScalarAccess();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Index ::= <ID> | <INTEGER>
  static final public void Index() throws ParseException {
                /*@bgen(jjtree) Index */
                ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        s = jj_consume_token(ID);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.name = s.image;
        break;
      case INTEGER:
        s = jj_consume_token(INTEGER);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.value = s.image;
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static void skip_to(int t) throws ParseException {
    Token nextToken;
    do {
        nextToken = getNextToken();
    } while (nextToken.kind != t);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(ADDSUB_OP)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(SIZE)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public yal2jvmTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x800000,0x100,0x84000100,0x8000,0x80000000,0x8000000,0x8000000,0x80028000,0x80000,0x80000000,0x8003000,0x3000,0x8000000,0x700,0x700,0x8c000100,0xc000000,0x100,0x4000000,0x8000000,0x4000,0x0,0x4c000000,0x80000,0x4c000000,0x0,0x80000000,0xc000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public yal2jvm(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public yal2jvm(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new yal2jvmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public yal2jvm(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new yal2jvmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public yal2jvm(yal2jvmTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(yal2jvmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
